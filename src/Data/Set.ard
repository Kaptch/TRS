\import Data.And
\import Data.Bool
\import Equiv (Map, QEquiv, Section, transQEquiv)
\import Equiv.Univalence
\import HLevel
\import Logic
\import Paths
\import Paths.Meta
\import Set
\import Utils.Logic

-- Kuratowski Finite Set
-- https://cs.ru.nl/~nweide/FiniteSetsInHoTT.pdf

\data FiniteSet (A : \Type)
  | empty
  | singleton (x : A)
  | union (s1 : FiniteSet A) (s2 : FiniteSet A)
  | nl (x : FiniteSet A) (i : I) \elim i {
    | left => union empty x
    | right => x
  }
  | nr (x : FiniteSet A) (i : I) \elim i {
    | left => union x empty
    | right => x
  }
  | idem (x : A) (i : I) \elim i {
    | left => union (singleton x) (singleton x)
    | right => singleton x
  }
  | assoc (x y z : FiniteSet A) (i : I) \elim i {
    | left => union x (union y z)
    | right => union (union x y) z
  }
  | comm (x y : FiniteSet A) (i : I) \elim i {
    | left => union x y
    | right => union y x
  }
  | trunc (a b : FiniteSet A) (p q : a = b) (i j : I) \elim i, j {
    | i, left => p @ i
    | i, right => q @ i
    | left, _ => a
    | right, _ => b
  }
  \where
    \use \level levelSet {A : \Type}
                         {a b : FiniteSet A}
                         (p q : a = b)
      : p = q =>
      path (\lam i => (path (\lam j => trunc a b p q j i)))

\func FiniteSetInduction {A : \Type}
                         (P : FiniteSet A -> \Set)
                         (P_empty : P empty)
                         (P_singleton : \Pi (x : A) -> P (singleton x))
                         (P_union : \Pi (x y : FiniteSet A) -> P x -> P y -> P (union x y))
                         (P_nl : \Pi (x : FiniteSet A) (p : P x) -> Path (\lam i => P (nl x i)) (P_union empty x P_empty p) p)
                         (P_nr : \Pi (x : FiniteSet A) (p : P x) -> Path (\lam i => P (nr x i)) (P_union x empty p P_empty) p)
                         (P_idem : \Pi (x : A) -> Path (\lam i => P (idem x i)) (P_union (singleton x) (singleton x) (P_singleton x) (P_singleton x)) (P_singleton x))
                         (P_assoc : \Pi (x y z : FiniteSet A) (p : P x) (q : P y) (r : P z) -> Path (\lam i => P (assoc x y z i)) (P_union x (union y z) p (P_union y z q r)) (P_union (union x y) z (P_union x y p q) r))
                         (P_comm : \Pi (x y : FiniteSet A) (p : P x) (q : P y) -> Path (\lam i => P (comm x y i)) (P_union x y p q) (P_union y x q p))
                         (x : FiniteSet A)
  : P x
  | P, P_empty, P_singleton, P_union, P_nl, P_nr, P_idem, P_assoc, P_comm, empty =>
    P_empty
  | P, P_empty, P_singleton, P_union, P_nl, P_nr, P_idem, P_assoc, P_comm, singleton x =>
    P_singleton x
  | P, P_empty, P_singleton, P_union, P_nl, P_nr, P_idem, P_assoc, P_comm, union s1 s2 =>
    P_union s1 s2
            (FiniteSetInduction P P_empty P_singleton P_union P_nl P_nr P_idem P_assoc P_comm s1)
            (FiniteSetInduction P P_empty P_singleton P_union P_nl P_nr P_idem P_assoc P_comm s2)
  | P, P_empty, P_singleton, P_union, P_nl, P_nr, P_idem, P_assoc, P_comm, nl x i =>
    (P_nl x (FiniteSetInduction P P_empty P_singleton P_union P_nl P_nr P_idem P_assoc P_comm x)) @ i
  | P, P_empty, P_singleton, P_union, P_nl, P_nr, P_idem, P_assoc, P_comm, nr x i =>
    (P_nr x (FiniteSetInduction P P_empty P_singleton P_union P_nl P_nr P_idem P_assoc P_comm x)) @ i
  | P, P_empty, P_singleton, P_union, P_nl, P_nr, P_idem, P_assoc, P_comm, idem x i =>
    (P_idem x) @ i
  | P, P_empty, P_singleton, P_union, P_nl, P_nr, P_idem, P_assoc, P_comm, assoc x y z i =>
    (P_assoc x y z (FiniteSetInduction P P_empty P_singleton P_union P_nl P_nr P_idem P_assoc P_comm x)
             (FiniteSetInduction P P_empty P_singleton P_union P_nl P_nr P_idem P_assoc P_comm y)
             (FiniteSetInduction P P_empty P_singleton P_union P_nl P_nr P_idem P_assoc P_comm z)) @ i
  | P, P_empty, P_singleton, P_union, P_nl, P_nr, P_idem, P_assoc, P_comm, comm x y i =>
    (P_comm x y (FiniteSetInduction P P_empty P_singleton P_union P_nl P_nr P_idem P_assoc P_comm x)
            (FiniteSetInduction P P_empty P_singleton P_union P_nl P_nr P_idem P_assoc P_comm y)) @ i

\func unionIdem {A : \Type}
                (x : FiniteSet A)
  : union x x = x
  | {A}, x => FiniteSetInduction (\lam y => union y y = y)
                                 (path (nl {A} empty))
                                 (\lam y => (path (idem {A} y)))
                                 (\lam y z u1 u2 =>
                                     \let
                                       | A => idp {_} {union (union y z) (union y z)}
                                       | B => rewriteI {2} (path (assoc (union y z) y z)) A
                                       | C => rewriteI {3} (path (comm y z)) B
                                       | D => rewrite (path (assoc z y y)) C
                                       | E => rewriteI u1 D
                                       | F => rewriteI (path (comm z y)) E
                                       | G => rewrite (path (assoc y z z)) F
                                       | H => rewriteI u2 G
                                     \in H)
                                 (\lam y u => pathOver (Path.inProp _ _))
                                 (\lam y u => pathOver (Path.inProp _ _))
                                 (\lam y => pathOver (Path.inProp _ _))
                                 (\lam a b c p q r => pathOver (Path.inProp _ _))
                                 (\lam y z p q => pathOver (Path.inProp _ _))
                                 x

\func member {A : \Type}
             (a : A)
             (f : FiniteSet A)
  : \Prop
  | a, empty => Empty
  | a, singleton x => TruncP (a = x)
  | a, union s1 s2 => (member a s1) || (member a s2)
  | a, nl x i => inv (QEquiv-to-= (PropOrEmpty {member a x})) @ i
  | a, nr x i =>
    inv ((QEquiv-to-= (PropOrEmpty {member a x})) *> (QEquiv-to-= (PropOrComm {Empty} {member a x}))) @ i
  | a, idem x i =>
    inv (QEquiv-to-= (truncOrIdem {a = x})) @ i
  | a, assoc x y z i =>
    (QEquiv-to-= (PropOrAssoc {member a x} {member a y} {member a z})) @ i
  | a, comm x y i =>
    (QEquiv-to-= (PropOrComm {member a x} {member a y})) @ i

\func extensionality {A : \Type}
                     (x y : FiniteSet A)
  : QEquiv {x = y} {\Pi (a : A) -> (member a x) = (member a y)} =>
  (qequiv1 x y) `transQEquiv` (qequiv2 x y)
  \where {
    \func qequiv1 {A : \Type}
                  (x y : FiniteSet A) : QEquiv \cowith
      | A => x = y
      | B => (union y x = x) && (union x y = y)
      | f => f'
      | ret => ret'
      | ret_f => ret_f'
      | f_sec => f_sec'
      \where {
        \func f' {A : \Type}
                 {x y : FiniteSet A}
                 (p : x = y)
          : (union y x = x) && (union x y = y)
          | {A}, {x}, {y}, p => Prod (rewriteI {1} p (unionIdem x)) (rewrite {1} p (unionIdem y))

        \func ret' {A : \Type}
                   {x y : FiniteSet A}
                   (p : (union y x = x) && (union x y = y))
          : x = y
          | {A}, {x}, {y}, Prod a b => (inv a) *> (path (comm y x)) *> b

        \func f_sec' {A : \Type}
                     {x y : FiniteSet A}
                     (p : (union y x = x) && (union x y = y))
          : f' (ret' p) = p
          | {A}, {x}, {y}, Prod a b => pmap2 Prod (Path.inProp _ _) (Path.inProp _ _)

        \func ret_f' {A : \Type}
                     {x y : FiniteSet A}
                     (p : x = y)
          : ret' (f' p) = p
          | {A}, {x}, {y}, p => Path.inProp _ _
      }

    \func qequiv2 {A : \Type}
                  (x y : FiniteSet A) : QEquiv \cowith
      | A => (union y x = x) && (union x y = y)
      | B => \Pi (a : A) -> (member a x) = (member a y)
      | f => f'
      | ret => ret'
      | ret_f => \lam _ => Path.inProp _ _
      | f_sec => f_sec'
      \where {
        \func f' {A : \Type}
                 {x y : FiniteSet A}
                 (p : (union y x = x) && (union x y = y))
          : \Pi (a : A) -> member a x = member a y
          | {A}, {x}, {y}, Prod a b =>
            \lam t => pmap (member t) ((inv a) *> (path (comm y x)) *> b)

        \func ret' {A : \Type}
                   {x y : FiniteSet A}
                   (p : \Pi (a : A) -> member a x = member a y)
          : (union y x = x) && (union x y = y)
          | {A}, {x}, {y}, p =>
            Prod (lemma1 x y (\lam a => Section.ret {=-to-Equiv (p a)})) (lemma1 y x (\lam a => Map.f {=-to-Equiv (p a)}))

        \func f_sec' {A : \Type}
                     {x y : FiniteSet A}
                     (h : \Pi (a : A) -> member a x = member a y)
          : f' (ret' h) = h
          | {A}, {x}, {y}, g => funExt (\lam t => member t x = member t y) (f' (ret' g)) g (\lam _ => Path.inProp _ _)
      }

    \func lemma1 {A : \Type}
                 (x y : FiniteSet A)
      : (\Pi (a : A) -> member a y -> member a x) -> union y x = x =>
      FiniteSetInduction (\lam y => (\Pi (a : A) -> member a y -> member a x) -> union y x = x)
                         (\lam _ => path (nl x))
                         (\lam el p =>
                             FiniteSetInduction (\lam x => member el x -> union (singleton el) x = x)
                                                (\lam n => absurd n)
                                                (\lam el' pr => TruncP.rec {el = el'}
                                                                           (\lam k1 k2 =>
                                                                               path (\lam i =>
                                                                                   (path (\lam j =>
                                                                                       trunc (union (singleton el) (singleton el')) (singleton el') k1 k2 j i))))
                                                                           pr
                                                                           (\lam q => rewrite {1} q (path (idem el'))))
                                                (\lam s1 s2 f f' u => \case u \with {
                                                  | byLeft a =>
                                                    \let
                                                      | A => f a
                                                      | B => idp {_} {union s1 s2}
                                                      | C => rewrite {1} A B
                                                      | D => rewrite (path (assoc (singleton el) s1 s2)) C
                                                    \in D
                                                  | byRight b =>
                                                    \let
                                                      | A => f' b
                                                      | B => idp {_} {union s1 s2}
                                                      | C => rewrite {1} A B
                                                      | D => rewriteI (path (assoc s1 (singleton el) s2)) C
                                                      | E => rewriteI (path (comm s1 (singleton el))) D
                                                      | F => rewrite (path (assoc (singleton el) s1 s2)) E
                                                    \in F
                                                })
                                                (\lam y u => pathOver (Path.inProp _ _))
                                                (\lam y u => pathOver (Path.inProp _ _))
                                                (\lam y => pathOver (Path.inProp _ _))
                                                (\lam a b c p q r => pathOver (Path.inProp _ _))
                                                (\lam y z p q => pathOver (Path.inProp _ _))
                                                x
                                                (p el (inP idp)))
                         (\lam s1 s2 f1 f2 f3 =>
                             \let
                               | A => f1 (\lam p q => f3 p (byLeft q))
                               | B => f2 (\lam p q => f3 p (byRight q))
                               | C => rewrite {1} B A
                               | D => rewriteI (path (assoc s1 s2 x)) C
                             \in D)
                         (\lam y u => pathOver (Path.inProp _ _))
                         (\lam y u => pathOver (Path.inProp _ _))
                         (\lam y => pathOver (Path.inProp _ _))
                         (\lam a b c p q r => pathOver (Path.inProp _ _))
                         (\lam y z p q => pathOver (Path.inProp _ _))
                         y
  }

\data ListedFiniteSet (A : \Type)
  | nil
  | cons (x : A) (l : ListedFiniteSet A)
  | dupl (a : A) (l : ListedFiniteSet A) (i : I) \elim i {
    | left => cons a (cons a l)
    | right => cons a l
  }
  | coml (a b : A) (l : ListedFiniteSet A) (i : I) \elim i {
    | left => cons a (cons b l)
    | right => cons b (cons a l)
  }
  | trunl (a b : ListedFiniteSet A) (p q : a = b) (i j : I) \elim i, j {
    | i, left => p @ i
    | i, right => q @ i
    | left, _ => a
    | right, _ => b
  }
  \where
    \use \level levelSet {A : \Type}
                         {a b : ListedFiniteSet A}
                         (p q : a = b)
      : p = q =>
      path (\lam i => (path (\lam j => trunl a b p q j i)))

\func ListedFiniteSetInduction {A : \Type}
                               (P : ListedFiniteSet A -> \Set)
                               (P_nil : P nil)
                               (P_cons : \Pi (a : A) (x : ListedFiniteSet A) -> P x -> P (cons a x))
                               (P_dupl : \Pi (a : A) (x : ListedFiniteSet A) (p : P x) -> Path (\lam i => P (dupl a x i)) (P_cons a (cons a x) (P_cons a x p)) (P_cons a x p))
                               (P_coml : \Pi (a b : A) (x : ListedFiniteSet A) (p : P x) -> Path (\lam i => P (coml a b x i)) (P_cons a (cons b x) (P_cons b x p)) (P_cons b (cons a x) (P_cons a x p)))
                               (x : ListedFiniteSet A)
  : P x
  | P, P_nil, P_cons, P_dupl, P_coml, nil => P_nil
  | P, P_nil, P_cons, P_dupl, P_coml, cons x l =>
    P_cons x l (ListedFiniteSetInduction P P_nil P_cons P_dupl P_coml l)
  | P, P_nil, P_cons, P_dupl, P_coml, dupl a l i =>
    P_dupl a l (ListedFiniteSetInduction P P_nil P_cons P_dupl P_coml l) @ i
  | P, P_nil, P_cons, P_dupl, P_coml, coml a b l i =>
    P_coml a b l (ListedFiniteSetInduction P P_nil P_cons P_dupl P_coml l) @ i

\func concat {A : \Type}
             (x y : ListedFiniteSet A)
  : ListedFiniteSet A
  | nil, l => l
  | cons x l, l' => cons x (concat l l')
  | dupl a l i, l' => dupl a (concat l l') i
  | coml a b l i, l' => coml a b (concat l l') i
  \where {
    \func concatNilL {A : \Type}
                     (x : ListedFiniteSet A)
      : concat x nil = x
      | nil => idp
      | cons x l => pmap (cons x) (concatNilL l)

    \func concatNilR {A : \Type}
                     (x : ListedFiniteSet A)
      : x = concat x nil
      | nil => idp
      | cons x l => pmap (cons x) (concatNilR l)

    \func concatCons {A : \Type}
                     (x : A)
                     (l : ListedFiniteSet A)
      : cons x l = concat l (cons x nil)
      | x, nil => idp
      | x, cons x' l' =>
        \let
          | A => idp {_} {cons x' (concat l' (cons x nil))}
          | B => rewrite {2} (concatCons x l') A
          | C => path (coml x x' l')
        \in C *> B

    \func concatAssoc {A : \Type}
                      (x y z : ListedFiniteSet A)
      : concat x (concat y z) = concat (concat x y) z
      | nil, _, _ => idp
      | cons x l, nil, nil =>
        \let
          | A => rewrite {2} (concatNilR l) (idp {_} {concat (concat l nil) nil})
        \in pmap (cons x) A
      | cons x l, nil, cons x1 l1 =>
        \let
          | A => rewriteI {2} (concatNilR l) (idp {_} {concat l (cons x1 l1)})
        \in pmap (cons x) A
      | cons x l, cons x1 l1, nil =>
        \let
          | A => idp {_} {concat l (cons x1 (concat l1 nil))}
          | B => rewrite {3} (concatNilR l1) A
          | C => concatNilR (concat l (cons x1 l1))
        \in pmap (cons x) (B *> C)
      | cons x l, cons x1 l1, l2 =>
        \let
          | A => idp {_} {concat l (cons x1 (concat l1 l2))}
          | B => A *> (concatAssoc l (cons x1 l1) l2)
        \in pmap (cons x) B

    \func concatComm {A : \Type}
                     (x y : ListedFiniteSet A)
      : concat x y = concat y x =>
      ListedFiniteSetInduction (\lam a => concat a y = concat y a)
                               (concatNilR y)
                               (\lam a' l' p =>
                                   \let
                                     | A => (pmap (cons a') p) *> (concatCons a' (concat y l'))
                                     | B => A *> (inv (concatAssoc y l' (cons a' nil)))
                                     | C => rewrite (concatCons a' l') B
                                   \in C)
                               (\lam a' l' p => pathOver (Path.inProp _ _))
                               (\lam a' l' p p' => pathOver (Path.inProp _ _))
                               x
  }

\func FiniteSet~ListedFiniteSet {X : \Type}
  : QEquiv \cowith
  | A => FiniteSet X
  | B => ListedFiniteSet X
  | f => f'
  | ret => ret'
  | ret_f => ret_f'
  | f_sec => f_sec'
  \where {
    \func f' {X : \Type}
             (s : FiniteSet X)
      : ListedFiniteSet X
      | empty => nil
      | singleton x => cons x nil
      | union s1 s2 => concat (f' s1) (f' s2)
      | nl x i => idp {_} {f' x} @ i
      | nr x i => concat.concatNilL (f' x) @ i
      | idem x i => dupl x nil i
      | assoc x y z i => concat.concatAssoc (f' x) (f' y) (f' z) @ i
      | comm x y i => concat.concatComm (f' x) (f' y) @ i

    \func ret' {X : \Type}
               (s : ListedFiniteSet X)
      : FiniteSet X
      | nil => empty
      | cons x l => union (singleton x) (ret' l)
      | dupl a l i =>
        \let
          | A => path (assoc (singleton a) (singleton a) (ret' l))
          | B => transport (\lam x => union (singleton a) (union (singleton a) (ret' l)) = union x (ret' l)) (path (idem a)) A
        \in B @ i
      | coml a b l i =>
        \let
          | A => path (assoc (singleton a) (singleton b) (ret' l))
          | B => (path (comm (singleton a) (singleton b)))
          | C => transport (\lam x => union (singleton a) (union (singleton b) (ret' l)) = union x (ret' l)) B A
          | D => inv (path (assoc (singleton b) (singleton a) (ret' l)))
        \in (C *> D) @ i

    \func ret_f' {A : \Type}
                 (x : FiniteSet A)
      : ret' (f' x) = x
      | empty => idp
      | singleton x => path (nr (singleton x))
      | union s1 s2 =>
        \let
          | A => help (f' s1) (f' s2)
          | B => rewriteI (ret_f' s1) A
          | C => rewriteI (ret_f' s2) B
        \in C
      \where
        \func help {A : \Type}
                   (x y : ListedFiniteSet A)
          : ret' (concat x y) = union (ret' x) (ret' y) =>
          ListedFiniteSetInduction (\lam a => ret' (concat a y) = union (ret' a) (ret' y))
                                   (inv (path (nl (ret' y))))
                                   (\lam a' l' p =>
                                       \let
                                         | A => pmap (union (singleton a')) p
                                         | B => path (assoc (singleton a') (ret' l') (ret' y))
                                         | C => A *> B
                                       \in C)
                                   (\lam a' l' p => pathOver (Path.inProp _ _))
                                   (\lam a' l' p p' => pathOver (Path.inProp _ _))
                                   x

    \func f_sec' {A : \Type}
                 (x : ListedFiniteSet A)
      : f' (ret' x) = x
      | nil => idp
      | cons x l => pmap (cons x) (f_sec' l)
  }

\func decidableEq->decidableMembership {A : DecSet}
                                       (S : FiniteSet A)
                                       (x : A)
  : Dec (member x S)
  | empty, x => no (\lam x => x)
  | singleton x, x1 => \case decideEq x1 x \with {
    | yes e => yes (inP e)
    | no n => no (\lam r => \case r \with {
      | inP a => n a
    })
  }
  | union s1 s2, x => \case decidableEq->decidableMembership s1 x, decidableEq->decidableMembership s2 x \with {
    | yes e1, yes e2 => yes (byLeft e1)
    | yes e, no n => yes (byLeft e)
    | no n, yes e => yes (byRight e)
    | no n1, no n2 => no (\lam r => \case r \with {
      | byLeft a => n1 a
      | byRight b => n2 b
    })
  }

\func memberBool {A : DecSet}
                 (x : A)
                 (s : ListedFiniteSet A)
  : Bool => \case decidableEq->decidableMembership (rewrite (QEquiv-to-= (FiniteSet~ListedFiniteSet)) s) x \with {
  | yes e => true
  | no n => false
}