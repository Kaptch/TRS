\import Data.Bool
\import Data.Sigma
\import Logic
\import Paths
\import Paths.Meta
\import Set.Fin
\open Nat

\data Vector (n : Nat) (A : \Type) \elim n
  | zero => Nil
  | suc n => Cons A (Vector n A)

\func vector_ind {A : \Type}
                 (P : \Pi (n : Nat) -> Vector n A -> \Type)
                 (P0 : P 0 Nil)
                 (Pn : \Pi (a : A) (n : Nat) (v : Vector n A) -> P n v -> P (suc n) (Cons a v))
                 (n : Nat)
                 (v : Vector n A)
  : P n v
  | P, P0, Pn, 0, Nil => P0
  | P, P0, Pn, suc n, Cons a v => Pn a n v (vector_ind P P0 Pn n v)

\func \infix 4 !! {A : \Type}
                  {i : Nat}
                  (v : Vector i A)
                  (n : Fin i)
  : A
  | {A}, {suc n}, Cons a' v', fzero => a'
  | {A}, {suc n}, Cons a' v', fsuc f => v' !! f

\func head {i : Nat}
           {A : \Type}
           (v : Vector (suc i) A)
  : A
  | Cons a _ => a

\func tail {i : Nat}
           {A : \Type}
           (v : Vector (suc i) A)
  : Vector i A
  | Cons _ v' => v'

\func map {i : Nat}
          {A B : \Type}
          (f : A -> B)
          (v : Vector i A)
  : Vector i B
  | {0}, f, Nil => Nil
  | {suc n}, f, Cons a v => Cons (f a) (map f v)

\func concat {i j : Nat}
             {A : \Type}
             (v1 : Vector i A)
             (v2 : Vector j A)
  : Vector (i + j) A \elim i, v1
  | 0, Nil => transport (\lam k => Vector k A) (zero+idempotent j) v2
  | suc n, Cons a v => transport (\lam k => Vector k A) (inv (suc_linear n j)) (Cons a (concat v v2))
  \where {
    \func zero+idempotent (i : Nat)
      : i = 0 + i
      | 0 => idp
      | suc n => pmap suc (zero+idempotent n)

    \func suc_linear (i : Nat)
                     (j : Nat)
      : suc i Nat.+ j = suc (i + j)
      | _, 0 => idp
      | _, suc n => pmap suc (suc_linear _ n)
  }

\func foldr {i : Nat}
            {A B : \Type}
            (f : A -> B -> B)
            (acc : B)
            (v : Vector i A)
  : B
  | {0}, _, acc, Nil => acc
  | {suc n}, f, acc, Cons a' v' => foldr f (f a' acc) v'

\func length {i : Nat}
             {A : \Type}
             (v : Vector i A)
  : Nat
  | {0}, Nil => 0
  | {suc n}, Cons _ v' => suc (length v')

\func count {A : \Type}
            {i : Nat}
            (P : A -> Bool)
            (v : Vector i A)
  : Nat
  | {A}, {0}, P, Nil => 0
  | {A}, {suc n}, P, Cons a' v' => if (P a') (suc (count P v')) (count P v')

\func filter {A : \Type}
             {i : Nat}
             (P : A -> Bool)
             (v : Vector i A)
  : \Sigma (j : Nat) (Vector j A)
  | {A}, {0}, P, Nil => (_, Nil)
  | {A}, {suc n}, P, Cons a' v' => \case filter P v' \with {
    | (_, v'') => \case (P a') \with {
      | true => (suc _, Cons a' v'')
      | false => (_, v'')
    }
  }

\func in {A : \Type}
         {i : Nat}
         (x : A)
         (v : Vector i A)
  : \Prop
  | {A}, {0}, x, Nil => Empty
  | {A}, {suc n}, x, Cons a' v' => (x = a') || in x v'

-- Inductive In
--\data In {A : \Type}
--         {i : Nat}
--         (x : A)
--         (v : Vector i A) \elim i, v
--  | 0, Nil => No Empty
--  | suc n, Cons x tl => Yes
--  | suc n, Cons hd tl => Maybe (In x tl)

\func inclusion {A : \Type}
                {i j : Nat}
                (v1 : Vector i A)
                (v2 : Vector j A)
  : \Prop =>
  \Pi (x : A) -> in x v1 -> in x v2

\func consMap {A B : \Type}
              {i : Nat}
              (f : A -> B)
              (a : A)
              (v : Vector i A)
  : Cons (f a) (map f v) = map f (Cons a v) =>
  idp

\func transportMap {A B : \Type}
                   {i j : Nat}
                   (f : A -> B)
                   (p : i = j)
                   (v : Vector i A)
  : map f (transport (\lam k => Vector k A) p v) = transport (\lam k => Vector k B) p (map f v) =>
  Jl (\lam a' p' => map f (transport (\lam k => Vector k A) p' v) = transport (\lam k => Vector k B) p' (map f v)) idp p

\func concatNil {A : \Type}
                {i : Nat}
                (v : Vector i A)
  : v = concat v Nil
  | {A}, {0}, Nil => idp
  | {A}, {suc i}, Cons a' v' => pmap (Cons a') (concatNil v')

\func concatMap {A B : \Type}
                {i j : Nat}
                (f : A -> B)
                (v1 : Vector i A)
                (v2 : Vector j A)
  : map f (concat v1 v2) = concat (map f v1) (map f v2) =>
  vector_ind (\lam n v => map f (concat v v2) = concat (map f v) (map f v2))
             (transportMap f (concat.zero+idempotent j) v2)
             (\lam a n v hyp =>
                 transport (\lam x => map f (transport (\lam (k : Nat) => Vector k A) (inv (concat.suc_linear n j)) (Cons a (concat v v2)))
                   =
                 transport (\lam (k : Nat) => Vector k B) (inv (concat.suc_linear n j)) (Cons (f a) x))
                           hyp
                           (transportMap f (inv (concat.suc_linear n j)) (Cons a (concat v v2))))
             i
             v1