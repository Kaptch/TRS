\import Function.Meta
\import HLevel
\import Logic
\import Paths
\import Paths.Meta
\import Set
\import TRS.Context
\import TRS.Signature
\import TRS.Term
\import Data.Vector \using (length \as lengthVec)
\import Relation.Core \using (inclusion \as inclusionRel, reflexive \as isReflexive, transitive \as isTransitive)
\import Relation.Wellfounded \using (wellFounded \as isWellFounded)

\func substitution {S : Signature}
                   {V : \Set}
  : \Type =>
  V -> Term S V

\func extends {S : Signature}
              {V : \Set}
              (s1 s2 : substitution {S} {V})
  : \Prop =>
  TruncP (\Sigma (q : substitution {S} {V})
                 (s1 = composition s2 q))

\func id {S : Signature}
         {V : \Set}
  : substitution {S} {V} =>
  \lam (x : V) => Var x

\func single {S : Signature}
             {V : DecSet}
             (x : V)
             (y : Term S V)
  : substitution {S} {V} =>
  \lam a => signleDecide x y a (decideEq a x)
  \where
    \func signleDecide {S : Signature}
                       {V : DecSet}
                       (x : V)
                       (y : Term S V)
                       (a : V)
                       (d : Dec (a = x))
      : Term S V
      | x, y, a, yes _ => y
      | x, y, a, no _ => Var a

\func singleSubsElimEq {S : Signature}
                       {V : DecSet}
                       (x : V)
                       (y : Term S V)
  : substitute (single {S} x y) (Var x) = y =>
  rewrite (_help1 x y (decideEq x x)) idp
  \where {
    \func _help1 {S : Signature}
                 {V : DecSet}
                 (x : V)
                 (y : Term S V)
                 (d : (Dec (x = x)))
      : single.signleDecide x y x d = y => rewrite (_help2 x d) idp

    \func _help2 {V : DecSet}
                 (x : V)
                 (d : Dec (x = x))
      : d = yes idp
      | x, yes e => transportInv (\lam q => yes q = yes (idp {_} {x})) (Path.inProp e idp) idp
      | x, no n => absurd (n idp)
  }

\func singleSubsElimNotEq {S : Signature}
                          {V : DecSet}
                          (x : V)
                          (y : Term S V)
                          (z : V)
                          (n : Not (x = z))
  : substitute (single {S} x y) (Var z) = Var z =>
  rewrite (_help1 x y z n (decideEq z x)) idp
  \where {
    \func _help1 {S : Signature}
                 {V : DecSet}
                 (x : V)
                 (y : Term S V)
                 (z : V)
                 (n : Not (x = z))
                 (d : (Dec (z = x)))
      : single.signleDecide x y z d = Var z
      | _, _, _, n, yes e => absurd (n (inv e))
      | _, _, _, _, no _ => idp
  }

\func singleElimEq {S : Signature}
                   {V : DecSet}
                   (x : V)
                   (y : Term S V)
  : single x y x = y => rewrite (singleSubsElimEq._help1 x y (decideEq x x)) idp

\func singleElimNotEq {S : Signature}
                      {V : DecSet}
                      (x : V)
                      (y : Term S V)
                      (z : V)
                      (n : Not (x = z))
  : single x y z = Var z => rewrite (singleSubsElimNotEq._help1 x y z n (decideEq z x)) idp

\func substitute {S : Signature}
                 {V : \Set}
                 (s : substitution {S} {V})
                 (t : Term S V)
  : Term S V
  | s, Var x => s x
  | s, Fun f v => Fun f (substituteVec s v)
  \where
    \func substituteVec {S : Signature}
                        {V : \Set}
                        {i : Nat}
                        (s : substitution {S} {V})
                        (v : Vector i (Term S V))
      : Vector i (Term S V)
      | {S}, {V}, {0}, s, Nil => Nil
      | {S}, {V}, {suc n}, s, Cons a' v' => Cons (substitute s a') (substituteVec s v')

\func composition {S : Signature}
                  {V : \Set}
                  (s1 : substitution {S} {V})
                  (s2 : substitution {S} {V})
  : substitution {S} {V} =>
  \lam (v : V) => substitute s2 (s1 v)

\func substituteId {S : Signature}
                   {V : \Set}
                   (t : Term S V)
  : t = substitute id t
  | Var v => idp
  | Fun f v => pmap (Fun f) (substituteVecId v)
  \where
    \func substituteVecId {S : Signature}
                          {V : \Set}
                          {i : Nat}
                          (v : Vector i (Term S V))
      : v = substitute.substituteVec id v
      | {S}, {V}, {0}, Vector.Nil => idp
      | {S}, {V}, {suc i}, Vector.Cons a v => pmap2 Cons (substituteId a) (substituteVecId v)

\func substituteVar {S : Signature}
                    {V : \Set}
                    (v : V)
                    (s : substitution {S} {V})
  : s v = substitute s (Var v) => idp

\func compositionId {S : Signature}
                    {V : \Set}
                    (s : substitution {S} {V})
  : s = composition id s =>
  funExt (\lam _ => Term S V) s (composition id s) (\lam x => rewrite (substituteVar x s) idp)

\func substituteSubstitute {S : Signature}
                           {V : \Set}
                           (s1 : substitution {S} {V})
                           (s2 : substitution {S} {V})
                           (t : Term S V)
  : substitute s1 (substitute s2 t) = substitute (composition s2 s1) t =>
  term_ind
      (\lam t => substitute s1 (substitute s2 t) = substitute (composition s2 s1) t)
      (\lam n => \lam v => substitute.substituteVec s1 (substitute.substituteVec s2 v) = substitute.substituteVec (composition s2 s1) v)
      (\lam _ => idp)
      (\lam f => \lam v => \lam p => pmap (Fun f) p)
      idp
      (\lam t => \lam n => \lam v => \lam p => \lam pv => pmap2 Cons p pv)
      t

\func substitutionPreservesRelation {S : Signature}
                                    {V : \Set}
                                    {rel : relation (Term S V)}
  : \Type =>
  \Pi (t1 : Term S V) ->
      \Pi (t2 : Term S V) ->
          \Pi (r : rel t1 t2) ->
              \Pi (sub : substitution {S} {V}) ->
                  rel (substitute sub t1) (substitute sub t2)

\func subsumes {S : Signature}
               {V : \Set}
               (s : Term S V)
               (t : Term S V)
  : \Prop =>
  TruncP (\Sigma (delta : substitution) (s = substitute delta t))
  \where {
    \func reflexive {S : Signature}
                    {V : \Set}
      : isReflexive (subsumes {S} {V}) =>
      \lam (t : Term S V) => inP (Var, inv (help1 t))
      \where {
        \func help1 {S : Signature}
                    {V : \Set}
                    (t : Term S V)
          : substitute Var t = t
          | Var v => idp
          | Fun f v => pmap (Fun f) (help2 v)

        \func help2 {S : Signature}
                    {V : \Set}
                    {i : Nat}
                    (v : Vector i (Term S V))
          : substitute.substituteVec Var v = v
          | {S}, {V}, {0}, Vector.Nil => idp
          | {S}, {V}, {suc n}, Vector.Cons a' v' => pmap2 Cons (help1 a') (help2 v')
      }

    \func transitive {S : Signature}
                     {V : \Set}
      : isTransitive (subsumes {S} {V}) =>
      \lam (x y z : Term S V) =>
          \lam (r1 : subsumes x y) =>
              \lam (r2 : subsumes y z) => \scase r1, r2 \with {
                | inP a', inP a'' =>
                  inP (composition a''.1 a'.1, a'.2 *> pmap (substitute a'.1) a''.2 *> (help1 z a'.1 a''.1))
              }
      \where {
        \func help1  {S : Signature}
                     {V : \Set}
                     (x : Term S V)
                     (a1 : substitution {S} {V})
                     (a2 : substitution {S} {V})
          : substitute a1 (substitute a2 x) = substitute (composition a2 a1) x
          | Var v, a1, a2 => idp
          | Fun f v, a1, a2 => pmap (Fun f) (help2 v a1 a2)

        \func help2  {S : Signature}
                     {V : \Set}
                     {i : Nat}
                     (v : Vector i (Term S V))
                     (a1 : substitution {S} {V})
                     (a2 : substitution {S} {V})
          : substitute.substituteVec a1 (substitute.substituteVec a2 v) = substitute.substituteVec (composition a2 a1) v
          | {S}, {V}, {0}, Vector.Nil, a1, a2 => idp
          | {S}, {V}, {suc n}, Vector.Cons a' v', a1, a2 => pmap2 Cons (help1 a' a1 a2) (help2 v' a1 a2)
      }
  }

\func substituteContext {S : Signature}
                        {V : \Set}
                        (s : substitution {S} {V})
                        (c : Context S V)
  : Context S V
  | _, Hole => Hole
  | s, Cont f i j p t1 c' t2 => Cont f i j p (substitute.substituteVec s t1) (substituteContext s c') (substitute.substituteVec s t2)

\func substituteFill {S : Signature}
                     {V : \Set}
                     (t : Term S V)
                     (s : substitution {S} {V})
                     (c : Context S V)
  : substitute s (fill c t) = fill (substituteContext s c) (substitute s t) =>
  context_ind (\lam x => substitute s (fill x t) = fill (substituteContext s x) (substitute s t))
              idp
              (\lam c f i j p t1 t2 hyp =>
                  \let
                    | A => idp {_} {map (substitute s) (concat t1 (Cons (fill c t) t2))}
                    | B => A *> (concatMap (substitute s) t1 (Cons (fill c t) t2))
                    | C => transport (\lam x => map (substitute s) (concat t1 (Cons (fill c t) t2)) = concat (map (substitute s) t1) x) (consMap (substitute s) (fill c t) t2) B
                    | D => transport (\lam x => map (substitute s) (concat t1 (Cons (fill c t) t2)) = concat x (Cons (substitute s (fill c t)) (map (substitute s) t2))) (inv (substituteVecMap s t1)) C
                    | E => transport (\lam x => map (substitute s) (concat t1 (Cons (fill c t) t2)) = concat (substitute.substituteVec s t1) (Cons (substitute s (fill c t)) x)) (inv (substituteVecMap s t2)) D
                    | F => transport (\lam x => map (substitute s) (concat t1 (Cons (fill c t) t2)) = concat (substitute.substituteVec s t1) (Cons x (substitute.substituteVec s t2))) hyp E
                    | G => pmap (transport (\lam k => Vector k (Term S V)) p) F
                    | H => (transportMap (substitute s) p (concat t1 (Cons (fill c t) t2))) *> G
                    | I => (substituteVecMap s (transport (\lam k => Vector k (Term S V)) p (concat t1 (Cons (fill c t) t2)))) *> H
                    | J => pmap (Fun f) I
                  \in J)
              c

\func consSubstituteVec {S : Signature}
                        {V : \Set}
                        {i : Nat}
                        (s : substitution {S} {V})
                        (c : Context S V)
                        (t : Term S V)
                        (v : Vector i (Term S V))
  : (Cons (substitute s (fill c t)) (substitute.substituteVec s v)) = (substitute.substituteVec s (Cons (fill c t) v)) =>
  \let
    | x => rewrite (substituteVecMap s v) (consMap (substitute s) (fill c t) v)
  \in rewrite (substituteVecMap s v) (inv x)

\func substituteVecMap  {S : Signature}
                        {V : \Set}
                        {i : Nat}
                        (s : substitution {S} {V})
                        (v : Vector i (Term S V))
  : substitute.substituteVec s v = map (substitute s) v
  | {S}, {V}, {0}, s, Vector.Nil => idp
  | {S}, {V}, {suc i}, s, Vector.Cons a' v' => pmap (Cons (substitute s a')) (substituteVecMap s v')