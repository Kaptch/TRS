\import Function (o)
\import Logic
\import Paths
\import TRS.Context
\import TRS.Signature
\import TRS.Substitution \using (composition \as compositionSub)
\import TRS.Term
\import Relation.Core
\import Data.Vector (inclusion \as incl)

\func lSideIsNotVar {S : Signature}
                    {V : \Set}
                    (rel : relation (Term S V))
                    (a b : Term S V)
  : \Prop =>
  \Pi (r : rel a b) ->
      (Not (\Sigma (x : V) (a = Var x)))

\func preserveVars {S : Signature}
                   {V : \Set}
                   (rel : relation (Term S V))
                   (a b : Term S V)
  : \Prop =>
  \Pi (r : rel a b) ->
      incl (vars b).2 (vars a).2

\record RewritingRule {S : Signature}
                      {V : \Set}
{
  | rule : relation (Term S V)
  | lSideIsNotVarProp : \Pi (x y : Term S V) -> lSideIsNotVar rule x y
  | preserveVarsProp :  \Pi (x y : Term S V) -> preserveVars rule x y
}

\func monotonic {S : Signature}
                {V : \Set}
                (r : relation (Term S V))
  : \Prop =>
  \Pi (x y : Term S V) ->
      \Pi (c : Context S V) ->
          r x y ->
          r (fill c x) (fill c y)

\func stable {S : Signature}
             {V : \Set}
             (r : relation (Term S V))
  : \Prop =>
  \Pi (x y : Term S V) ->
      \Pi (delta : substitution {S} {V}) ->
          r x y ->
          r (substitute delta x) (substitute delta y)

\func ReductionRule {S : Signature}
                    {V : \Set}
                    (r : RewritingRule {S} {V})
                    (x y : Term S V)
  : \Prop =>
  TruncP (\Sigma (x' y' : Term S V)
                 (rel : r.rule x' y')
                 (c : Context S V)
                 (delta : substitution {S} {V})
                 (x = fill c (substitute delta x'))
                 (y = fill c (substitute delta y')))

\func reductionStepIsRule {S : Signature}
                          {V : \Set}
                          (r : RewritingRule {S} {V})
                          (c : Context S V)
                          (s : substitution {S} {V})
                          {x y : Term S V}
                          (rel : r.rule x y)
  : ReductionRule r (fill c (substitute s x)) (fill c (substitute s y)) =>
  inP (x, y, rel, c, s, idp, idp)

\func reductionStepMonotonic {S : Signature}
                             {V : \Set}
                             (r : RewritingRule {S} {V})
  : monotonic (ReductionRule r) =>
  \lam (x y : Term S V) =>
      \lam (c : Context S V) =>
          \lam (rr : ReductionRule r x y) =>
              \scase rr \with {
                | inP a =>
                  inP (a.1,
                       a.2,
                       a.3,
                       composition c a.4,
                       a.5,
                       (pmap (fill c) a.6) *> (fillFill c a.4 (substitute a.5 a.1)),
                       (pmap (fill c) a.7) *> (fillFill c a.4 (substitute a.5 a.2)))
              }

\func reductionStepStable {S : Signature}
                          {V : \Set}
                          (r : RewritingRule {S} {V})
  : stable (ReductionRule r) =>
  \lam (x y : Term S V) =>
      \lam (delta : substitution {S} {V}) =>
          \lam (rr : ReductionRule r x y) =>
              \scase rr \with {
                | inP a =>
                  \let
                    | A => transport2
                        (\lam x' y' => ReductionRule r (substitute delta x') (substitute delta y'))
                        (inv a.6)
                        (inv a.7)
                    | B => transport2
                        (\lam x' y' => ReductionRule r x' y')
                        (inv (substituteFill (substitute a.5 a.1) delta a.4))
                        (inv (substituteFill (substitute a.5 a.2) delta a.4))
                    | C => transport2
                        (\lam x' y' => ReductionRule r (fill (substituteContext delta a.4) x') (fill (substituteContext delta a.4) y'))
                        (inv (substituteSubstitute delta a.5 a.1))
                        (inv (substituteSubstitute delta a.5 a.2))
                    | D => reductionStepIsRule
                        r
                        (substituteContext delta a.4)
                        (compositionSub a.5 delta)
                        a.3
                  \in (A o B o C) D
              }