\import Arith.Nat
\import Data.Unit
\import Equiv
\import Equiv.Univalence
\import Function
\import Logic
\import Paths
\import Set

\func natUnit (n : Nat)
  : \Type
  | 0 => Unit
  | suc n => Empty

\instance NatDecSet : DecSet.Impl Nat
  | decideEq => decideEq'
  \where {
    \func decideEq' (x y : Nat)
      : Dec (x = y)
      | 0, 0 => yes idp
      | 0, suc y => no (\lam p => (Map.f {=-to-Equiv (pmap natUnit p)} T))
      | suc x, 0 => no (\lam p => Map.f {=-to-Equiv (pmap natUnit (inv p))} T)
      | suc x, suc y => \case decideEq' x y \with {
        | yes e => yes (pmap suc e)
        | no n => no (n o (pmap pred))
      }
  }