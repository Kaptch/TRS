\import Data.Vector
\import Equiv
\import Paths
\import Paths.Meta
\import Set

\instance VectorDecSet {A : DecSet}
                       {i : Nat}
: DecSet.Impl (Vector i A)
  | decideEq => decideEq'
  \where {
    \func decideEq' {A : DecSet}
                    {i : Nat}
                    (x y : Vector i A)
      : Dec (x = y)
      | {A}, {0}, Nil, Nil => yes idp
      | {A}, {suc i}, Cons a1 x1, Cons a2 x2 =>
        \let
          | A => decideEq a1 a2
          | B => decideEq' x1 x2
        \in \case A, B \with {
          | yes e1, yes e2 => yes (pmap2 Cons e1 e2)
          | yes e1, no n2 => no (\lam q => n2 (pmap tail q))
          | no n1, yes e2 => no (\lam q => n1 (pmap head q))
          | no n1, no n2 => no (\lam q => n1 (pmap head q))
        }
  }

\func vectorLengthEquiv {A : \Type}
                        {i i' : Nat}
                        (e : i = i')
  : QEquiv \cowith
  | A => Vector i A
  | B => Vector i' A
  | f => \lam v => transport (\lam r => Vector r A) e v
  | ret => \lam v => transportInv (\lam r => Vector r A) e v
  | ret_f x => Jl (\lam a p => transportInv (\lam (r : Nat) => Vector r A) p (transport (\lam (r : Nat) => Vector r A) p x) = x) idp e
  | f_sec y =>
    \let
      | A => Jl (\lam a p =>
          transport (\lam (r : Nat) => Vector r A) p (transportInv (\lam (r : Nat) => Vector r A) p (transport (\lam r => Vector r A) (inv e *> p) y))
            =
          (transport (\lam r => Vector r A) (inv e *> p) y))
                idp
                e
    \in rewriteF (inv_*> e) A